name: Sync to GitLab

on:
  release:
    types: [published]  # Se dispara al publicarse un release en GitHub

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      # Paso 1: Checkout completo
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Paso 2: Configurar Git
      - name: Configure Git
        run: |
          git config user.name "github-bot"
          git config user.email "bot@github.com"

      # Paso 3: Añadir remoto de GitLab
      - name: Add GitLab remote
        env:
          GL_REMOTE_URL: ${{ secrets.GL_REMOTE_URL }}
          GL_TOKEN: ${{ secrets.GL_TOKEN }}
        run: |
          git remote add gitlab "https://oauth2:${GL_TOKEN}@${GL_REMOTE_URL#https://}"

      # Paso 4: Comprobar divergencias en master
      - name: Check for diverging commits
        run: |
          git fetch gitlab master
          if ! git merge-base --is-ancestor gitlab/master master; then
            echo "❌ GitLab master tiene commits que GitHub no tiene. Revisar antes de sincronizar."
            exit 1
          fi

      # Paso 5: Push de commits y tags a GitLab
      - name: Push commits and tags to GitLab
        run: |
          git push gitlab master
          git push gitlab --tags

      # Paso 6: Crear release en GitLab si no existe
      - name: Create GitLab release
        env:
          GL_REMOTE_URL: ${{ secrets.GL_REMOTE_URL }}
          GL_TOKEN: ${{ secrets.GL_TOKEN }}
          RELEASE_TAG: ${{ github.ref_name }}
        run: |
          PROJECT_PATH=$(echo $GL_REMOTE_URL | sed -E 's#https://[^/]+/(.*)\.git#\1#')
          PROJECT_PATH_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$PROJECT_PATH''', safe=''))")

          EXISTING=$(curl -s --header "PRIVATE-TOKEN: $GL_TOKEN" "https://gitlab.com/api/v4/projects/$PROJECT_PATH_ENCODED/releases/$RELEASE_TAG")

          if echo "$EXISTING" | grep -q 'tag_name'; then
            echo "Release ya existe en GitLab: $RELEASE_TAG"
          else
            echo "Creando release en GitLab: $RELEASE_TAG"
            curl -s --request POST "https://gitlab.com/api/v4/projects/$PROJECT_PATH_ENCODED/releases" \
              --header "PRIVATE-TOKEN: $GL_TOKEN" \
              --header "Content-Type: application/json" \
              --data "{
                \"name\": \"Release $RELEASE_TAG\",
                \"tag_name\": \"$RELEASE_TAG\",
                \"description\": \"Release sincronizado desde GitHub\"
              }"
          fi

      # Paso 7: Subir meteocat.zip como asset al release de GitLab
      - name: Upload meteocat.zip to GitLab release
        env:
          GL_REMOTE_URL: ${{ secrets.GL_REMOTE_URL }}
          GL_TOKEN: ${{ secrets.GL_TOKEN }}
          RELEASE_TAG: ${{ github.ref_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PROJECT_PATH=$(echo $GL_REMOTE_URL | sed -E 's#https://[^/]+/(.*)\.git#\1#')
          PROJECT_PATH_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$PROJECT_PATH''', safe=''))")

          ASSET_NAME="meteocat.zip"
          ZIP_URL="https://github.com/${GITHUB_REPOSITORY}/releases/download/$RELEASE_TAG/meteocat.zip"

          echo "Subiendo $ASSET_NAME al release de GitLab desde $ZIP_URL"
          curl --request POST "https://gitlab.com/api/v4/projects/$PROJECT_PATH_ENCODED/releases/$RELEASE_TAG/assets/links" \
            --header "PRIVATE-TOKEN: $GL_TOKEN" \
            --header "Content-Type: application/json" \
            --data "{
              \"name\": \"$ASSET_NAME\",
              \"url\": \"$ZIP_URL\"
            }"

