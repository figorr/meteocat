stages:
  - test
  - github

variables:
  BASE_URL: "https://api.meteo.cat"
  PYPI_USERNAME: $PRODUCTION_USERNAME  # Usuario de PyPI
  PYPI_PASSWORD: $PRODUCTION_PASSWORD  # Token de PyPI
  GL_TOKEN: $GL_TOKEN  # Token de GitLab
  GH_TOKEN: $GH_TOKEN  # Token de GitHub
  GIT_STRATEGY: fetch
  GIT_DEPTH: 0

default:
  image: python:3.12.7
  before_script:
    - python -V  # Verificar versi칩n de Python
    - python -m pip install --upgrade pip
    - pip install poetry  # Instalar Poetry
    - poetry config virtualenvs.create true  # Activada la creaci칩n de entornos virtuales
    - poetry config virtualenvs.in-project true  # Crear el virtualenv en el directorio del proyecto
    - poetry install  # Instalar dependencias con Poetry

test_job:
  stage: test
  script:
    - poetry run python meteocat/locations.py  # Ejecuta tu script principal
  artifacts:
    paths:
      - municipis_result.json  # Archivo que queremos guardar
    expire_in: never  # No expira. El archivo generado estar치 siempre disponible
  only:
    - master

github_job:
  stage: github
  script:
    - git fetch --tags  # Asegurarse de obtener todas las etiquetas
    - git checkout master  # Asegurarse de estar en la rama master
    - git pull origin master --rebase  # Integra los cambios remotos con un rebase
    - poetry run semantic-release version  # Generar nueva versi칩n
    - poetry run semantic-release publish  # Ejecutar el comando para publicar el release
    - git push https://${GH_TOKEN}@github.com//figorr/meteocat.git  # Hacer push al repositorio GitHub en la rama master
  only:
    - master
